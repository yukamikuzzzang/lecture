14-객
6-주
x-단

for 문에서 어떤 데이터를 빼어 넣는지에 주의
허프만 비트에 대한 내용까지..

2/3에 해당하는 내용이 여기에 있음

예상평가 문제지
1. 단계적인 절차
2. 정확성, 수행성, 유한성, 효율성
3. 유클리드의 최대공약수(GCD) 알고리즘
알고리즘이 필요한 이유? 적은 자원으로 효과적으로 문제를 해결하기 위해
*알고리즘으로 해결할 수 없는 것 또한 문제로 냄
4. 시간복잡도
-----5번은 제외----- 하항 -> 하한
6.	-버블정렬: 이웃하는 숫자를 비교하며 작은 수를 앞으로 이동시키는 과정을 반복 
	-선택정렬*
	-삽입정렬: 정렬이 안된 부분에 있는 원소 하나를 정렬된 부분의 적절한 위치에 삽입하여 정렬
	-쉘정렬*: 삽입정렬로 앞부분을 '빠르게'/ 동시에 앞에 큰 숫자는 뒷부분으로 이동
	-힙정렬: 퀵과 비슷
	-기수정렬 (6)
	-퀵정렬: 피봇
7. 정렬 알고리즘의 성능 비교
	시간 복잡도	안정성

선택	O(n^2)		X
삽입	O(n^2)		O
쉘	O(n^2)		X
힙	O(nlogn)		X
합병	O(nlogn)		O
퀵	O(nlogn)		X
기수	O(k(n+r))		O
버블	O(n^2)		-(외우진 마세요)

8. 선택정렬로 오름차순 정렬한 경우 2회전 후의 결과?
Sort만으로 해결할 수 있는 건 아니다.

선택정렬
	1 입력배열전체에서 최솟값 선택

9 4 5 11 8
---최솟값:4

0번째 있는 것과 바꿈

4| 9 5 11 8
---최솟값:5
4 5| 9 11 8

*최소신장트리
주어진 가중치 그래프
사이클 없이 모든 점들을 연결시킨 트리들 중 간선들의 '가중치합이 최소'인 트리

***
크러스컬:Kruskal
가중치가 가장 작은 간선이 사이클을 만들지 않을 때만 <욕심내어> 간선 추가

프림:Prim
임의의 점 하나를 선택 후, (n-1)개의 간선을 하나씩 추가시켜 트리를 만듬.

KruskalMST(G)
입력:
가중치 그래프 G = (V,E), |V|=n, |E|=m

연결된 선을 다 뜯어내어 정렬.
가중치, 노선으로 비교.

Prim 알고리즘
1. 마지막에 선택된 정점?
2. 최소비용?
