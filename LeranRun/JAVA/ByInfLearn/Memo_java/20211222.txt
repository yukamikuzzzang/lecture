/*7강*/ 배열
프로그램에선 데이터를 관리하는 가장 기본적인 문법
*배열이란?
인덱스를 이용해서 자료형이 같은 데이터를 관리하는 것.

int a = 10;	//각각의 데이터
int b = 20;	//각각의 데이터

데이터들을 한 번에 관리하고자 함.

[데이터]  [데이터]  [데이터] ... [데이터]    
인덱스 0 인덱스 1 인덱스2 .... 인덱스 n-1

배열 사용 예
아파트 호수 관리: 101호, 201호, 301호, ...
회사 사번 관리: 홍길동(k-001), 홍길자(k-002) ...
학습 학생 관리: 박찬호(01), 이승엽(02), ...

인덱스를 나열해 한 번에 관리하는 것.
(다수의 데이터를 인덱스로 관리, 이때 배열안에 있는 데이터의 형을 동일)
(다른 형의 데이터를 한 배열에 넣는다면 에러!)

*배열 선언 및 초기화
변수와 대동소이.


//배열 선언 후 초기화
int[] arr1 = new int[5];
자료형 [] 배열 이름 = new 배열크기
배열 선언 = 배열을 메모리에 올린 상황.
인덱스로 모든 배열에 접근가능.

//배열 선언과 초기화를 동시에
int[] arr2 = {10,20,30,40,50};

한 번 선언할 때 크기를 변경하지 않는 배열.
(Java에선 그럼.)

/*
기존 프로젝트 가져오는 방법? (import)
프로젝트 경로 바꾸기. switching workspace

import ...> general ...>existing workspace...
대입연산자 시행했던 것 같고 오기.
*/

예시자료.
String 배열 name
int 배열 score

Scanner
사용자로부터 데이터를 받을 때 사용하는 클래스(class)
Scanner scanner = new Scanner(System.in);

서식문자
~printf("%s의 점수를 입력하시오. :",name[0]);

...
score[1] = scanner.nextInt();
점수를 입력할 때까지 대기.

...
~printf("...");

scanner.close();
//리소스를 반환하는 곳.

배열 선언, 배열 초기화, 배열의 인덱스를 넘어가면 exception이 발생할 수 있음.
배열의 기본적인 요소를 알았고. 메모리와 관련된 부분에 대해 알아보자.

+Scanner: 사용자의 입력을 받기를 기다리는 함수
Scanner scanner = new Scanner(System.in);
//System.in : InputStream 콘솔에서 입력을 받겠다는 뜻.
scanner.nextInt(); Int형 변수만 입력받겠다. (자바는 type에 민감하다.)

/*8강*/
배열과 메모리
배열: 다수의 데이터를 인덱스를 통해 관리
변수: 하나의 데이터: 메모리 크기는 자료형의 따라 잡음.
배열은 메모리의 크기를 어떻게 정하고 어떻게 접근하는지를 살펴보자.
배열의 속성, 다차원 배열에 대해서도 알아보자.

*배열의 메모리 크기
배열을 구성하는 데이터의 자료형에 따라 배열의 메모리 크기가 결정된다.

int[] arr = new int[3]; //3칸 ... 12byte
int형 4byte=32bit
기본적인 원리를 아는 것이 도움이 될 듯.

*배열을 가리키는 배열이름
기본 자료형 데이터를 담고 있는 변수와 달리 배열 변수는 배열 데이터의 주소를 담고 있다.

int i = 10;
int[] i = new int[3];

i[]에는 뭐가 들어있는가?

i[] 주소 ...> 10 20 30
배열 i       i[0] i[1] i[2]        

i[n]에 시작주소만 갖고 있음.

*배열 기본속성
기본 자료형 데이터를 담고 있는 변수와 달리 배열 변수는 배열 데이터의 주소를 담고 있다.

예제에선 배열의 주소값을 담고 있지 않은 상태 ...> null
배열.length; 배열의 길이를 출력하는 부분.
Arrays.toString(배열이름); 해당이름의 배열을 출력해줌.
Arrays.copyOf(배열이름, 배열.length()); 배열을 복사해줌.

arrAtt1 = 배열의 주소를 담고 있음.

arrAtt2	//배열 레퍼런스
arrAtt1의 메모리 주소를 arrAtt2의 대입.
같은 곳을 가리킴.
arrAtt3 = 값을 복사했을 뿐. 주소는 같지 않다.

값이 같다고 같은 객체라 생각하지 말자.
//이해가 잘 안된다면.. 변수했던 부분을 되짚어보자.
//배열은 값은 어딘가에 있고. 주소에 대한 부분을 담는다.


1차원 배열, 2,3,4.. 차원 배열
다차원 배열. 배열에 또 다른 배열이 들어갈 때마다 차원이 늘어남.
3차원 이상부턴 잘 사용하지 않음.

배열 안에 배열이 들어가기 시작하면
3차원이상부터 메모리를 많이 먹고 능률이 떨어지고 복잡해짐.
2차원 까진 쓰는 편.

*다차원 배열
배열 안에 또 다른 배열이 존재.

//다차원 배열
int[][] arrMul = new int[3][2]; //3행 2열의 배열을 만들겠다.

int[행번호][열번호] 순으로 진입.

자바에 대한 경험이 많지 않은 편..
복잡한 프로젝트를 진행하게 될 경우..

/*잊기 쉬운 부분*/
배열의 요소를 복사했다 != 같은 레퍼런스인가? (아니다)
== 완전히 다른 배열
배열을 대입했다. != 새로운 객체를 만들었다? (아니다) 
== 배열의 동일한 주소를 가지고 있다는 것.

+다차원 배열 또한 선언 및 초기화 가능.
(이차원의 경우)
int[][] arr2 = new int[5][5];
new 사용시엔 기본자료형이아닌 객체자료형이다.

/*9강*/
조건문
프로그램이 조건에 따라 양자 택일 또는 다자 택일을 진행하는 조건문.
조건에 따라 프로그램의 흐름이 결정되는 것.

*조건문
조건의 결과에 따라 양자택일 또는 다자 택일을 진행

양자택일: 주로 if문이 쓰임
다자택일: 주로 switch문이 쓰임 
(다른 프로그램들과도 일맥상통하는 부분)

*if문
if(조건식), if(조건식) else, if(조건식) else if(조건식)

if(조건식){
 실행문
}

if 조건식 == true
실행문 실행

if 조건식 == false
실행문을 건너뜀

-----

if 조건식 == false{
 실행문 건너뛰고
}
else{
 에 있는 실행문 실행
}

----

if(~) else if(~) else

if( 조건식 ) {
	[1]
} else if( 조건식) {
	[2]
} else {
	[3]
}

if(false) else if(false) ...> [3]
if(false) else if (true) ...>[2]
if(true) else if ...	  ...>[1]

데이터를 주고받는 것이 중요하다.
돈을 출력할 때에도 여러 조건들(인증서 등)을 맞추어서 보내듯이..

*Switch
비교대상이 되는 결과값과 선택사항이 많을 경우 주로 사용

사용자로부터 데이터를 받겠다! Scanner 객체사용
객체 생성시 new(객체생성자)를 써줌.
다른 곳에 있는 객체를 쓸 때엔 import 구문을 써줘야함.
IDE가 알아서 해주는 부분.

switch(score) ...

case A:
	~
	break;
score가 A와 같다면
A에 해당하는 실행문을 실행 후
break;를 만나 탈출.

default:
case에 해당하지 않을경우 실행하는 부분
없어도 무관.

if문을 가장 많이 씀. (상대적)
switch문도 많이 씀.

if()
if() else
if() else if() else

default:

모든 조건식에 해당하지 않는 경우에 해당하는 부분

~
case 100:
case 90:
	~	//두 가지 케이스에 해당하는 경우 실행.
	break;

+case에 들어가는 값은 정수 타입만 가능하다.

/*10강*/
반복문
특정 실행문이 반복적으로 실행될 때 필요.
프로그래밍에선 중요한 문법..!
반복적으로 실행되어야하는 일이 많기에..!

프로그램이 반복적으로 실행되는 방법에 대해 학습.
반복문은 무엇인가?
반복문을 구현해내는 문법?!

*반복문이란?
프로그램 진행을 특정 조건에 따라 반복적으로 진행하는 것.

조건을 제시하고 
참이면 반복을 몇 번 해라
거짓이면 반복하지 마라

for, while : 조건이 참일 때까지 반복 수행

예1) 구구단을 구하기 위해 1에서부터 1씩 더하며 9까지 곱셉 연산을 진행
예2) 조도센서를 센싱한 데이터가 10미만이면 건물의 LED를 1초 간격으로 계속 점등

*for문
for(int i = 1; i < 10; i++){ }
[초기값;조건;증감값]

i가 1~10보다 작을 때까지
i에 1씩 더해가며 프로그램 반복진행
[ i==10이라면 멈춤.]

for(int i = 1; i<10;i=i+2){ }
i에 2씩 더해가며 프로그램 반복진행
[ i==10이라면 멈춤.]

*while문
while(조건식){...}

while(rNum < 10){ }
rNum이 10보다 작을 때까지 프로그램 반복 진행
(증감값을 비롯한 나머지 부분이 바깥에 있음.)

*do~while문
while문과 비슷하나
조건 결과에 상관없이 무조건 최초 한번은 [...}의 프로그램을 수행.

do{
	//무조건 한 번은 실행
} while(false)	//false라면 반복 멈춤.

while은 처음부터 조건식을 비교. 맞지않으면 처음부터 실행하지 않을 수 있음.
do while은 일단 한번 실행. 그 이후로 계속 반복할지를 조건식을 통해 결정.

반복문
<무한반복되어 리소스를 모두 소진한채로 시스템이 다운될 수도 있음.>

for문
초기값,조건,증감값
while문
조건을 제외한 나머지는 외부에 의존
do~while문
while과 유사하나 한번은 무조건 실행