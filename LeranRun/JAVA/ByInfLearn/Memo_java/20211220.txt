/*5장*/ 특수 문자와 서식 문자
일반적으로 쓰는 게 아닌 특정 서식에 맞는 문자를 사용하는 방법..!

*특수 문자

\(역슬래시, 원화로 나오기도 함)

\t	탭		탭 = 스페이스바 4번
\n	줄 바꿈
\'	작은 따옴표
\"	큰 따옴표
\\	역슬래시		역슬래시가 출력됨.

*주석
컴파일러가 컴파일하지 않고 무시하는 언어

// 특수문자 (슬래시 2번) >> 한줄 주석
>주석을 없애면 에러가 뜸.
Unresolved compilation problems: 해석할 수 없는 문제가 뜨기 때문에
Ctrl+S를 누르는 순간 .class파일을 컴파일 하지만 주석은 컴파일하지 않음

/*
* 여러 줄 주석
*/

디버깅 기능으로 써도 사용하고 어떤 커멘트를 달아놓을 때에도 사용.

*서식 문자
일반 문자가 아닌 서식에 사용되는 문자

printf() 메서도 이용
f : format

%d 10진수
%o 8진수
%x 16진수
%c 문자
%s 문자열
%f 실수

System.out.println(""); 	//한 문장 출력 후 개행도 해줌
System.out.println("%d",10);	//출력만 하고 개행을 하진 않음. (\n)

System.out.println("%d학년 %d반 %d번",6 ,2 ,10); //6학년 2반 10번
(순차적으로 들어간다는 점..!)
계산기에서 16진수, 10진수, 8진수로 나타낼 수 있음.
프로그래밍엔 문제가 없음

*서식 문자의 정렬과 소수점 제한 기능
//서식문자 정렬 기능
~printf("%d\n",123);
~printf("%d\n",1234);
~printf("%d\n",12345);

~printf("%5d\n",123);
~printf("%5d\n",1234);
~printf("%5d\n",12345);
//다섯개의 공간을 만들어놓고 오른쪽 정렬

//서식문자 소수점 제한 기능
~printf("%f\n",1.23);
~printf("%.0f\n",1.23);	//소수점 1번째
~printf("%.1f\n",1.23);
~printf("%.2f\n",1.23);

많이 나오진 않지만 약방의 감초!
가끔씩 쓰이곤 한다. 안쓰면 잊어버리기 마련
구글링을 통해 다시한번 떠올리는 기회가 되기를.

특수문자 + 서식문자
빈번히 쓰는 기능은 아니지만 모르면 안되지.
한 번씩만 코딩해보면 금방 쉽게 습득할 수 있을 거라 생각합니다!


출력문에 굳이 그대로 값을 때려넣지 않고 복잡하게 하는 이유?
실시간으로 변화하는 값에 대응하기 위해서. (변수와의 콜라보!)

+Tip
%출력의 경우 printf에선 포맷으로 인식하기에
%% ..> %문자가 출력된다.

double d = 1.34234d;
float f = 1.3342f;
하는 이유는 컴파일러가 float형을 double로 인식하는 걸 방지하는 차원
실수 끝에 f를 붙이면 float형 변수로 인식.
double d도 마찬가지.

String 문자열
Char 문자

Char 문자 1개. 실제 값이 있음.
String 문자열. 실질적으로 좌표만 가짐.

String ==으로 비교 불가(실제 값이 없음) / .equals()를 사용하여 해결.
Char는 가능.

/*6장*/ 연산자
연산: +-*/  > < != etc..
프로그래밍, 굉장히 많은 연산을 한다. 굉장히 다양하고 많은 연산자.
실제 프로그래밍을 할 때 막힘없이 프로그래밍을 할 수 있도록 하자.

*피연산자 개수에 의한 연산자 구분
단항, 이항 그리고 삼항 연산자로 구분
단항: 피연산자가 하나 +x, -x, !x
(+5) (-5) 
!x : x를 부정하는 값.

이항: 피연산자가 둘 x=y, x<y, x!=y
x = 10; //이항 연산자

삼항: 피연산자가 셋
이거 하나만 있음.
조건식 : true ? false;

꼭 구분할 필욘 없음. 
종류가 있다는 것만 짚고 가자.

*대입 연산자
오른쪽의 결과를 왼쪽에 대입(할당)한다.

'=' 수학: 오른쪽과 왼쪽 값이 같다.
'=' 프로그램: <오른쪽 값을 왼쪽에 대입>
'==' 수학에서의 의미와 같음.

x = 10
y = 20

x = y

x > 20
y > 20

처음하시는 분들은 꼭 한 번씩 쳐보세요.
손에 익숙해지는 것이 기능구현을 할 때에 막힘이 없이 프로그램에 임할 수 있습니다.

*산술 연산자
피연산자를 이용해 +,-,*,/,% 등을 수행

+ 덧셈
- 뺄셈
* 곱셈
/ 나눗셈
% 나머지 : x % y : x를 y로 나누고 남은 나머지

10 % 20 = 10
int형일 때엔 소수점이 나오지 않음.
소수점을 보고 싶다면 명시적 형변환(double)을 붙여서 하면 소수점까지 확인가능.

*복합 대입연산자
산술 연산자와 대입 연산자를 결합한 연산자
+=	더하고 대입
-=	빼고 대입
*=	곱하고 대입
/=	나누고 대입
%=	나머지를 대입

기존에 값에다가 더하거나 빼거나 곱하거나 나눈 다시 대입한다.
x += 10
x = x + 10

프로그래밍에서 생각보다 잘 쓰는 친구

*관계 연산자
두 개의 피연산자를 비교해서 참/거짓의 결론을 도출한다.

(x 기준)
x>y	크면
x<y	작으면
x>=y	크거나 같으면
x<=y	작거나 같으면
x==y	같으면
x!=y	같지 않으면

*증감 연산자
++ 1만큼 증가
-- 1만큼 감소

++ 했는데 왜 증가를 안했지?
기존의 x값에 1을 증가시켜 대입 : x = x + 1

++x :전위 연산자, x에 값을 일단 메모리에 더해서 화면에 출력
x++ :후위 연산자, x에 값을 먼저 출력 후 x값을 하나 더 더함 //출력은 10으로 하지만 실제 값은 11이라는 것
앞에 붙느냐 뒤에 붙느냐에 따라 값에 변화가 있다는 것..!

*논리 연산자
피연산자의 논리곱, 논리합, 논리부정을 수행
&& 논리곱 (AND)	a && b : a와 b 모두 참이면 참
|| 논리합 (OR)	a || b : a와 b중 하나라도 참이면 참
! 논리부정 (NOT) 	!a : a의 상태를 부정

*삼항 연산자(조건 연산자)
//삼항 연산자가 이거 밖에 없음.
조건식 ? 식1 : 식2

조건식이 참이면 식1 실행
조건식이 거짓이면 식2가 실행

*비트 연산자
자바에선 메모리 관리를 하지 않기에 거의 쓰진 않지만 간혹 쓰긴 함.
비트 연산자의 장점? 
데이터를 비트(bit)단위로 환산하여 연산을 수행하여, 다른 연산자보다 연산 속도가 향상됨.
(요즘은 거의 못 느낄 정도)

(대부분은 이진수binary로 바뀌어 계산)
& : AND 연산
| : OR 연산
^: XOR 연산

a & b : a와 b가 모두 1이면 1
a | b : a와 b 중 하나라도 1이면 1
a ^ b : a와 b가 같지 않으면 1

계산기 > 프로그래머 에서도 확인가능.
CPU에 맡겨야하는 부분. 자바에선 굳이 많이 쓰이진 않는다.
연산 방법에 대해서 알아둘 필요가 있음.

자바에서 사용하는 연산자에 대해 알아봄.
프로그램을 많이 해보며 손에 익히면 따로 학습할 필요는 없을 부분.

/*변수를 굳이 초기화해주는 이유?정의하지 않았을 때 들어간 쓰레기값 때문에 원치않는 동작을 하는 것을 막기 때문..!*/
