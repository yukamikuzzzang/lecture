/*16장*/ 패키지와 static

패키지 객체를 만들기 위한 것.
class를 어떤 디렉터리 별로 관리를 잘 해놓으면 찾기도 쉽고 프로젝트 진행에도 도움..! 폴더를 만들어 class파일을 관리하는 것...> 해당 디렉터리를 패키지라 부름. 

어떤 클래스를 생성시 메모리에 다른 객체로 별도 존재. 다른 클래스에 나온 것(속성, 기능)을 공유하고 싶을 땐? static!

*패키지
java 프로그램은 많은 클래스로 구성. 이러한 클래스를 폴더 형식으로 관리하는 것: 패키지

프로그램 생성시 수십, 수백개의 클래스를 만들어 관리하게 될 것. 클래스별로 패키지를 만든다면 일의 효율성을 떨어뜨리는 결과를 가져옴. 디렉터리에 해당하는 클래스를 모아 관리하는 것..!

com.java.*
com 폴더 ...> java 폴더 ...> 
(경로를 의미하는 것을 의미.)

패키지 이름은 어떻게 정하는 것이 좋나?
(개발자 마음대로 정할 수 있지만..)
: 통상적으로 정할 때는...

-패키지 이름은 패키지에 속해 있는 클래스가 최대한 다른 클래스와 중복되는 것을 방지하도록 만든다. 
-패키지 이름은 일반적으로 도메인을 거꾸로 이용한다.
(소규모엔 문제가 없으나.. 대규모 프로젝트라면 다른 곳에 쓰일 수도 있기에 내가 만든 패키지가 유일하게 남으려면.. 도메인을 역순으로 표시. " ex) kr.co.프로젝트이름 " ) 실제로는 기술설계 할 때 프로젝트 이름에 대해 상호협의를 해놓는다. (PM이 정하는 경우도 있음.)
-개발 중에 패키지 이름과 구조는 변경될 수 있다. ( Refactor ) 로컬도 같이 변경됨.
-패키지 이름만 보고도 해당 패키지 안에 있는 클래스가 어떤 속성/기능을 갖고 있는지 예상 될 수 있도록 이름을 만든다.


package 패키지 경로;
//클래스 만들기
접근지정자 class 클래스 이름 {

}

자바가 기본으로 제공하는 클래스도 존재.
import java.util.ArrayList;
(java.util.ArrayList : 패키지)
다른 곳에 사용하기 위해서 import를 사용해줄 수 있음.

*import
'다른 패키지'에 있는 '클래스를 사용'하기 위해서는 import 키워드를 사용

같은 패키지에 있다면 그냥 써도 되겠지만..
package com.java.employee;
//+
import com.java.dailyJournal; // 명시
	
	DailyJournal journal = new DailyJournal( );
	//import가 없다면 에러.
////
package com.java.dailyJournal;

import를 좀 더 쉽게하는 방법..?
나는.. com.java.dailyJournal에 있는 모든 클래스를 import 할꺼야..!

com.java.dailyJournal.*; //에스타리스크 추가.

그게 아니면..
클래스 이름 앞에다가 풀네임을 다 적어줘도 무관.
대신 보기가 너무 안 좋음.. 쓸 때마다 계속 풀네임을 가져다 써야함..
그래서 import 이용하면 좋다.

*static
클래스의 속성과 메서드에 static 키워드를 사용하면 어디서나 속성과 메서드를 공유할 수 있다.

예시:
박찬호와 이승엽의 계좌에 저장되는 돈은 다르다. 객체를 따로 생성했기 때문.(메모리에 객체가 두 개.) 그런데 amount에 static이 있다면..?

적어도 amount는 메모리에 생성된 모든 객체가 공유하는 변수가 되었다.
박찬호 선수가 이전에 저축한 것이 들어갔다..!
이승엽 선수만 돈을 썼는데 공유통장에서 돈이 빠져나가는 효과가 발생..

static + pacakge
패키지와 static을 써서 적절하게 쓴다면 효율적인 프로그래밍을 할 수 있을 것. 너무 많은 데이터를 static으로 쓴다면 메모리에 부하가 올 것임. (프로젝트를 하면서 익히는 노하우..!)

/*static: 프로그램 실행부터 종료까지 메모리에 계속 상주. 전역, 정적 변수 및 함수가 이러한 경우임.*/

/*17장*/
데이터 은닉
(왠지 모르게.. 너.. 낯설다..?)
객체가 가지고 있는 데이터들을 외부로부터 변질되지 않게 보호하는 방법(?)

지난 시간.. package + static이야기를 보며 넘어가보자.

EmployeeBank 클래스에 있는 String 멤버변수
생성자를 통해 객체 생성.

접근지정자
public : 외부에서 쉽게 접근할 수 있음
private: 내부에서만 접근할 수 있음

어떤 속성이 public일 때에 문제점?
ex) 박찬호, 이승엽 계좌를 만들었는데..
계좌가 다른 사람의 이름으로 바뀔 수 있음.
외부에서 쉽게 데이터를 변경하지 못하게 끔 하는 것..!

private String name;
//데이터를 외부로부터 보호!

*멤버 변수의 private 설정
멤버 변수(속성)은 주로 private으로 설정해, 외부로부터 데이터가 변질되는 것을 막는다.

ex) 데이터(속성) 변질이 우려되는 시나리오.
-직원 급여 프로그램에서, 급여 담당자가 실수로 급여액을 잘못 입력한 경우
-변경될 수 없는 사번이 변경되는 경우.

*setter, getter
외부에서 데이터를 변경할 수 없기에 한 번 초기화가 되면 접근할 수 없게 됨외부에서 메소드를 통해 접근할 수 있도록 도움을 주는 setter, getter

이클립스는 getter setter 자동완성을 제공.
source ..> generate getter and setter
(intellJ기준 alt+insert 하고 고르면 됨.)

굳이 메서드를 거쳐서 한번 거쳐가는 이유?
안전장치를 만들기 위함.

getter setter 필요에 의해서 만들어도 그렇지 않아도 무관.
필요한 만큼만 만들어서 사용하기..!
중요한 내용..!
데이터 은닉..! 다른 객체지향프로그램을 하더라도 다른 곳과도 거의 다를 게 없다..!

여러 클래스에 메인메서드들이 있는 경우 어떤 메인 메서드를 실행시킬 것인지 선택할 수 있다.

/*18강*/
상속
조상으로부터 물려받는 것
기존 클래스의 기능을 상속받아서 새로운 클래스를 쉽게 만들 수 있는 방법

*상속
부모 클래스를 상속받은 자식 클래스는 부모 클래스의 속성과 기능도 이용할 수 있다!

할아버지(집)
↑<상속>
아버지(집+차)
↑<상속>
아들(집+차+요트)

parent class(상위 클래스)(속성, 기능)	|객체: parent class + child class
↑<상속>			<생성>	|
child class(하위 클래스)(속성 + 기능)---|객체: parent class + child class
전체적으로 클래스를 확장

*상속의 필요성
기존의 검증된 class를 이용해서 빠르고 쉽게 새로운 class를 만들 수 있다.

G 음식점			모든 메뉴를 새롭게 만들어야 함.
(할아버지 운영)
↓<비법 계승>
P 음식점			P음식점 메뉴는 G음식점의 메뉴에
(아버지 운영)		새로운 몇 가지만 추가하면 된다.
↓<비법 계승>
C 음식점			C음식점의 메뉴는 P음식점의 메뉴에
(아들 운영)		새로운 몇 가지만 추가하면 됨.

[검증된 메뉴를 이용해 쉽고 빠르게 개업할 수 있다.]

*상속 구현
extend 키워드를 이용해서 상속을 구현한다.

child가 parent클래스를 상속받으며 parentFun() childFun()이라는 메소드를 모두 사용할 수 있음.

자식 객체를 만들 때에 부모 객체가 먼저 생성된 후 자식이 생성.
(Child를 생성하면 상속을 해준 Parent(상위) 클래스가 먼저 생성됨.)
A > B > C 형태로 상속받는 형태라면
가장 상위에 있는 A부터 생성 후 B, C 생성.

소스 참고.

자바 언어에선 상속시 "단일상속"만 지원
"다중상속"은 지원하지 않음.

상속: 객체지향프로그래밍에서 나온 개념.
다중상속을 지원하는 언어도 있음.

extends A, B ...


ParentClass Constructor 생성
ChildClass Constructor   생성
childFun()			자식메서드가 먼저 실행.(이미 생성 완료된 상태)
parentFun()

*부모 클래스의 private 접근자
자식 클래스는 부모 클래스의 모든 자원을 사용할 수 있지만, private 접근자의 속성(멤버변수)과 메서드는 접근할 수 없다.

***
프로그램에서 다이어그램을 많이 이용.
상속을 나타날 때엔 상속을 하는 상위클래스를 향해 실선 화살표를 그림
(아래에서 위로)

/*19장*/
상속에 대한 기본 개념과 구현 방법
+ 상속에 대해 좀 더 자세히 알아보는 시간(상속 특)

*메서드 오버라이드(override)
부모 클래스의 기능을 자식 클래스에서 재정의해서 사용한다.
(override = 재정의)

parent class(짜장 만드는 기능)
↑<상속>
child class(더 맛있는 짜장 만드는 기능) ---(생성)--- 객체(parent class) + (child class)

오버라이드로 재정의 되지 않았다면 parent가 실행되었겠지만
오버라이드로 재정의 되어서 child class의 내용이 실행.

*자료형(타입)
기본자료형
int
short
char
boolean
String
...

이러한 것과 같이 클래스 또한 데이터 타입(클래스 = 데이터타입)
childClass의 데이터 타입? childClass 타입!

누구도 상속받지 않는 클래스가 있더라 할지라도..
모든 클래스들이 상속받고 있는 클래스 Object!
(이클립스 Ctrl+t, IntelliJ Ctrl+h)

java.lang : Object
자바에 존재하는 모든 클래스는 최상위 클래스인 Object를 상속받음.
(배우지 않은) ArrayList도 마찬가지.

*super 클래스
상위 클래스를 호출할 때 super 키워드를 이용.

this: 현재 내가 선택한 객체

this. ~ (내가 가지고 있는 객체를 가리킬 때 사용.)
super. ~ (상위 클래스에 있는 친구를 찾아라)

메소드 오버라이드 ****
(내가 어떤 클래스를 상속받아서 쉽게 만들었는데. 기능을 업데이트 할 때 사용)
클래스도 하나의 자료형! (자료형을 통일하는 것이 가능)
Object 클래스
super 키워드!

+
/*
① ParentClass를 상속받고 있는 FirstChildClass의 경우, 생성자 호출시 메모리상에서 어떤 과정을 거치나요?
ParentClass constructor가 먼저 호출되고 그 후 FirstChildClass constructor가 호출되는데 메모리 주소를 어떻게 레퍼런스 하고 있나요? 

② 위와 마찬가지로 FirstChildClass가 ParentClass를 상속받고 있을 때,
FirstChildClass fch1 = new FIrstChildClass();를 통해 생성된 객체(fch1)와
ParentClass fch2 = new FirstChildClass();를 통해 생성된 객체(fch2)의 차이가 무엇인가요?

(* 인스턴스명.getClass().getName()을 통해 클래스명을 확인했을 때, 둘 다 FirstChildClass로 확인되었습니다)
제가 이해되지 않는 부분은 다음 사실입니다.

객체생성시 데이터타입을 FirstChildClass로 정의했던 fch1의 경우, FirstChildClass에서만 정의한 method(getOpenYear())를 호출할 수 있었습니다. 반면 객체생성시 데이터타입을 ParentClass로 정의했던 fch2의 경우, ParentClass에서 동일한 이름의 method(getOpenYear())를 정의하고 그것을 FirstChildClass내에서 override하여야 실행이 가능했습니다.
두 객체가 어떠한 차이가 있어 이러한 현상이 일어나는지에 대해 자세히 설명해주시면 감사하겠습니다.
*/

캐스팅이란? 형변환
자바의 상속 관계에 있는 부모, 자식 클래스 간에는 서로 간의 형변환이 가능하다.
자식 클래스가 부모 클래스의 타입으로 캐스팅되는 업캐스팅
부모 클래스가 자식 클래스의 타입으로 캐스팅되는 다운캐스팅

업캐스팅: 하위클래스의 객체가 상위클래스 타입으로 형변환되는 것!
상위클래스 레퍼런스 변수가 하위클래스로 객체화된 인스턴스를 가리킬 수 있다. (사람은 생물이다.)

// 캐스팅 후 멤버에 직접 접근 확인을 위해 private 선언과 getter 메서드는 생략합니다.
class Person {
    String name;

    public Person(String name) {
        this.name = name;
    }
}

class Student extends Person {
    String dept;

    public Student(String name) {
        super(name);
    }
}

public class CastingTest {
    public static void main(String[] args) {
        // 레퍼런스 student를 이용하면 name, dept에 접근 가능
        Student student = new Student("MadPlay");

        // 레퍼런스 person을 이용하면 Student 객체의 멤버 중
        // 오직 Person 클래스의 멤버만 접근이 가능합니다.
        Person person = student;
        person.name = "Kimtaeng";
        
        // 아래 문장은 컴파일 타임 오류
        person.dept = "Computer Eng";
    }
}

//멤버변수 + 메서드에도 동일 적용.
//업캐스팅 시에는 명시적인 캐스팅 선언을 하지 않아도 됨.
하위클래스 Student는 Person타입이기도 하니까.

사용하는 이유? 다형성.

다운캐스팅: 업캐스팅된 것을 다시 원상태로 돌림.
자신의 고유한 특성을 잃은 클래스의 객체를 다시 복구.

class Person {
    String name;

    public Person(String name) {
        this.name = name;
    }
}

class Student extends Person {
    String dept;

    public Student(String name) {
        super(name);
    }
}

public class CastingTest {
    public static void main(String[] args) {
        // 업캐스팅 선행
        Person person = new Student("MadPlay");

        // 다운캐스팅
        Student student = (Student) person;

        // Okay!
        student.name = "Kimtaeng";

        // Okay!
        student.dept = "Computer Eng";
    }
}

차이점? 명시적으로 타입을 지정해주어야함. + 업캐스팅이 선행되어야함.
(컴파일 시점에선 오류가 발생하지 않아도 런타임 오류를 발생시킬 위험이 있다.)
참조: https://madplay.github.io/post/java-upcasting-and-downcasting

/*20강*/
내부 클래스와 익명 클래스

내부클래스: 클래스 안에 또 다른 클래스
(코드가 장황해지고 복잡해지기에 잘 사용하지 않음)
익명 클래스
(지금도 많이 사용)

*내부(inner) 클래스
클래스 안에 또 다른 클래스를 선언하는 것. 이렇게 하면 두 클래스의 멤버에 쉽게 접근할 수 있다.
데이터를 공유할 때 어디서나 사용가능하게..

개인 차인 있지만 그다지 좋은 프로그래밍 방식은 아님.
객체들간의 관계를 통해 프로그래밍 해나가는 관계.
객체 안에 또 다른 객체가 존재. 객체를 손 쉽게 공유해서 좋을 듯 하지만..
로직이 복잡해지면 꼬일 수 있음. 현재는 그다지 실무에서 많이 쓰지 않음.

*익명(anonymous) 클래스
이름이 없는 클래스로 주로 메서드를 재정의하는 목적으로 사용

보통 클래스를 만든다면.

Anonymouseclass ac = new Anonymouseclass();
new Anonymouseclass; //이름이 없어서 익명클래스

익명클래스가 가지고 있는 메서드를 오버라이딩 할 수 있다.
주로 재정의하기 위해 사용.
도트 연산자를 통해 재정의한 메서드를 바로 호출할 수 있음.

.method();

이름이 없다?
한 번 쓰고 버린다.
(다시 호출할 방법이 없기 때문)

익명클래스는 어디에 쓸까?
주로 인터페이스나 추상클래스에서 주로 사용.

내부클래스
클래스 안에 또 다른 클래스. 코드가 장황, 가독성이 떨어져 많이 안 사용함.
익명클래스
이름이 없는 클래스. 인터페이스, 추상클래스에 많이 사용.

/*21강*/
인터페이스

클래스: 객체를 생성하는 틀. 기능과 속성을 정의하여 사용. new를 통해 객체를 생성:메소드호출 및 속성 변경
인터페이스: 클래스와 외형적으론 비슷하나 객체를 생성하는 것이 불가. 메소드 호출을 통한 기능 수행도 불가.

프로그래밍을 하는데(객체지향프로그래밍에서) 인터페이스를 모른다고해도 상관없음.
그러나 인터페이스를 활용하면 좀 더 세련된 프로그램을 만들 수 있을 것임.
한 번의 경험으로 인터페이스를 모두 이해할 순 없을 것임.
자주 사용하다보면 인터페이스를 어떻게 사용해야할지 감이 올 것.

(다른 여러가지 의미도 가지고 있음.)
*인터페이스란?
클래스와 달리 객체를 생성할 수 없으며, 클래스에서 구현해야하는 작업 명세서. (????)

class ---(생성 with new)---> 객체

interface -->X --->객체
↑<구현>
class --(생성 with new)---> 객체

interface 선언만 되어있는 부분에서 정의부분을 만들어 줄 수 있음.

*인터페이스를 사용하는 이유?
가장 큰 이유는 객체가 다양한 자료형(타입)을 가질 수 있기 때문.
어떤 작업에서의 명세서 같은 역할

interfaceA
interfaceB
interfaceC
interfaceD

class (A,B,C,D)를 모두 구현할 수 있다.

public class ImplementsClass() implements ... () {
}

implements를 이용해서..!

InterfaceA ia = new ImplementClass(); //new를 통해 메모리에 객체를 생성.
InterfaceB ib = new ImplementClass();
...

A의 기능, B의 기능, C의 기능, D의 기능을 구현함.
implementClass()를 통해 생성된 객체는 A,B,C,D에 해당하는 데이터 타입을 가질 수 있음.
선언만 하지. 작업하지 않음. 작업 명세서!

인터페이스A에 선언되어있는 메소드는 정의부가 없으니.. ( funA(){ ... } (중괄호 부분))
선언해 사용하는 것은 의미가 없음. 이를 구현하는 것은? interfaceA를 구현해내는 클래스에서 정의를 새롭게하여 사용..!

extends는 다중상속이 안되어 하나밖에 안되지만..
implements는 다름. 다형성을 지원..!
작업명세서라는 껍데기만 있는 친구.
실질적으로 명세하는 것은. Interface를 implements한 class가 한다.

*인터페이스 구현
class 대신 interface 키워드를 사용하며, extends 대신 implements 키워드를 이용.

*장난감 인터페이스
interface를 이용하면 객체를 다양한 자료형(타입)을 가질 수 있다.

Toy
-ToyRobot
-ToyAirplane

데이터 타입은 Toy
(클래스는 다르지만 타입이 같기에 배열에 담길 수 있음)

다양한 객체의 데이터 타입을 가질 수 있음.
인터페이스에서 선언만 해주고 실제 구현은 객체에서 하기 때문에 처음부터 객체를 만드는 것이 아니라 그때그때 수시로 객체의 성격에 맞게 개성있게 기능을 구현할 수 있는 장점도 있다.
고-급기능으로서 인터페이스를 잘 활용해보자.

+
인터페이스를 사용하면 좋은 점
interface는 설계의 개념을 생각하자
>외부시스템에 api를 공개하는 측면
>특성마다 작은 interface로 설계할 수 있다는 측면

출처: https://bit.ly/3EtQ215

/*22강*/
추상클래스

추상을 빼면 Class
구체화되지 않은 추상적인 Class
인터페이스의 특징을 어느정도 가지고 있는 Class

Class와 인터페이스의 기능을 짬뽕한 친구라 생각하면 될 듯?

인터페이스와 추상클래스?

*추상클래스란?
클래스의 공통된 부분을 뽑아서 별도의 클래스(추상클래스)로 만들어 놓고, 이것을 상속해서 사용
abstractClass

abstract class
↑<상속>
Class→<생성>→객체

abstract 클래스의 특징
-멤버변수를 가진다
-abstract 클래스를 상속하기 위해선 extends를 이용
-abstract 메서드를 가지며, 상속한 클래스에서 반드시 구현해야함
-일반 메서드도 가질 수 있음
-일반 클래스와 마찬가지로 생성자도 있음.

선언만 되어있는 abstract 메서드는 상속을 받은 클래스에서 구현한다.

*추상클래스 구현
클래스 상속과 마찬가지로 extends 키워드를 이용해 상속. abstract(추상) 메서드를 구현.
멤버변수 선언 ok
기본 생성자 + 파라미터를 받아서 만드는 생성자 ok
this.멤버변수 .. 초기화 ok
일반 메서드 ok

추상 메서드!!!
public abstract void fun2( );

추상 메서드를 상속받아서 @Override를 통해 구현(강제로 반드시 구현)
추상클래스, 인터페이스 부분이 헷갈릴 수 있지만 낯설 뿐 어렵진 않아.

*Bank 추상클래스
예제

예금과 출금은 정해놓음
적금과 해약은 은행에서 재량껏 만드세요!

처음 인터페이스나 클래스를 보게 된다면.. 
공통되는 부분을 추상적으로 만들어놓고..
추상클래스를 상속받는 클래스에서 알아서 구현하는구나... (다양한 데이터 타입을 가질 수 있겠구나..)

*인터페이스 vs 추상클래스

공통점
추상메서드를 가짐
객체 생성 불가. 자료형(타입)으로 사용

차이점

interface
상수, 추상메서드만 가짐
추상메서드를 구현만 하도록 함
다형성을 지원

abstract class
클래스가 가지는 모든 속성과 기능을 가짐
추상 메서드 구현 및 상속의 기능을 가짐
단일 상속만 지원(extends)

어느게 좋다?를 정의내릴 순 없을 것이다.
다양한 프로그램 설계: interface
단일상속 하면서 공통된 부분을 뽑아낼 땐: abstract class

단단하고 구조적으로 유연한 프로그램을 할 수 있을 것..!
