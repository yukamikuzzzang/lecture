정규분포 랜덤을 지원하는 numpy
random.rand : 진짜 무작위
random.randn 
평균이 0 , 편차가 1인 정규분포로 난수를 발생시킴.
0을 중심으로 정규분포를 한다
>> 가우스분포
0으로 갈 수록 높아지고
멀어질 수록 낮아지고

표준편차를 사용하고 싶은 때가 더 많다.
randn(몇 개를 만들어!)
normal(0,0.5,1000)

정규분포를 주로 쓰는 곳..
통계와 같은 곳.

다음에는 회계를 배울 예정.
수학 = 수학자들에겐 종교.
이 세상의 것들을 수학의 힘으로 완벽히 해석할 수 있을 것이라봄.

자연현상의 것들.
인간사회의 것들.
이러한 수학이 예쁘게 보이진 않음.

경향성은 보이지만 그 경향성 안에 것들은 보이지 않는다.
발생하는 모든 노이즈를 제거해야한다.
원래의 데이터를 구할 수 있도록 해야.

오차의 벌어진 데이터를 직선으로 모으는 것.
주가를 가장 잘 표현하는 직선을 찾는 것.
신경망이 회계분석과 밀접한 관련이 있음.

표준편차:
정규분포에서 벗어날 확률이 얼마나 큰가?

컴퓨터가 저 두 집단이 뭉쳐있다는 것을 알려주는 것은 
인간이 확인하는 것과는 또 다른 문제.


-2
numpy 조건문
형태가 맞지 않으면 ERROR!

np.arrange(3)
print(x[Ture,True]) < ERROR

배열과 배열이 END하는 효과?

True False
True True
and or 안됨.

logical and > &
logical or	> |

where라는 좋은 함수가 있다.

그전에 조건문을 좀더 써보자.

numpy
tochy 
행렬방식으로 빠르게 처리
내부적으로 loop를 돌리는 느낌.

where(조건, 참인 경우의 값, 거짓인 경우의 값)
배열의 형태를 유지할 수 있다는 점이 where의 장점.

조건은 다른 곳에서 값은 다른 곳에서 가져올 수 있다는 장점..!

-3
배열 두 개를 붙이는 거..ㄴ데
많다?
왜 그렇게 많은 것인고..

어떤 배열이 있을 때 긴 배열 하나를 만든다. <1차원 배열!>
배열의 모양을 유지한 상태에서 붙이고 싶은 경우
concatenate!

axis 2차원이라면 세로축 가로축
[ [1,2], [3,4] ]
세로가 첫 번째 축
axis 0 > 세로축을 풀어서 붙임 (세로로 붙인다.)
axis 1 > 가로축을 풀어서 붙임 (가로로 붙인다.)

기본은 0으로 (세로축)으로 되어있음.

이름도 길고, 축번호도 줘야하고..
c_, r_
column(행), row(열)

축개념이 중요하다.

stack?
배열의 형태를 유지한 상태로 또 하나의 배열을 묶는다.
시행착오를 겪으며 
어떠한 데이터에 어떠한 값이 들어갈 수 있도록 해야하는지 고민..!

회계분석 > 신경망?
numpy 관련 코드들이 있다면..

리얼 끝판왕?

x[::-1]
reverse로 꺼내오는 방법.
